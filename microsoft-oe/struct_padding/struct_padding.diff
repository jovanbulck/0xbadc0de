diff --git a/samples/helloworld/enclave/Makefile b/samples/helloworld/enclave/Makefile
index 2d3fa65..a234c44 100644
--- a/samples/helloworld/enclave/Makefile
+++ b/samples/helloworld/enclave/Makefile
@@ -14,7 +14,7 @@ ifeq ($(USE_GCC),)
         COMPILER=clang
 endif
 
-CFLAGS=$(shell pkg-config oeenclave-$(COMPILER) --cflags)
+CFLAGS=$(shell pkg-config oeenclave-$(COMPILER) --cflags) -I..
 LDFLAGS=$(shell pkg-config oeenclave-$(COMPILER) --libs)
 
 all:
diff --git a/samples/helloworld/enclave/enc.c b/samples/helloworld/enclave/enc.c
index 512ef5f..d5b2521 100644
--- a/samples/helloworld/enclave/enc.c
+++ b/samples/helloworld/enclave/enc.c
@@ -2,6 +2,8 @@
 // Licensed under the MIT License.
 
 #include <stdio.h>
+#include <string.h>
+#include "struct.h"
 
 // Include the trusted helloworld header that is generated
 // during the build. This file is generated by calling the
@@ -11,23 +13,24 @@
 // This is the function that the host calls. It prints
 // a message in the enclave before calling back out to
 // the host to print a message from there too.
-void enclave_helloworld()
+void enclave_helloworld(struct_t* s)
 {
-    // Print a message from the enclave. Note that this
-    // does not directly call fprintf, but calls into the
-    // host and calls fprintf from there. This is because
-    // the fprintf function is not part of the enclave
-    // as it requires support from the kernel.
-    fprintf(stdout, "Hello world from the enclave\n");
-
-    // Call back into the host
-    oe_result_t result = host_helloworld();
-    if (result != OE_OK)
+    struct_t my_local_copy;
+
+    my_local_copy.a = 0xdeadbeef;
+    my_local_copy.b = 0xcc;
+    my_local_copy.c = 0xc00ffee;
+
+    //fprintf(stdout,"Struct in enclave at %p\n", &my_local_copy);
+
+    volatile uint8_t* sp = (uint8_t*)&my_local_copy;
+
+    for(unsigned int i = 0; i < 32; i++)
     {
-        fprintf(
-            stderr,
-            "Call to host_helloworld failed: result=%u (%s)\n",
-            result,
-            oe_result_str(result));
+        // do something
     }
+
+    memcpy(s, &my_local_copy, sizeof(struct_t));
 }
+
+
diff --git a/samples/helloworld/helloworld.edl b/samples/helloworld/helloworld.edl
index 81e4813..2319701 100644
--- a/samples/helloworld/helloworld.edl
+++ b/samples/helloworld/helloworld.edl
@@ -1,13 +1,15 @@
 // Copyright (c) Microsoft Corporation. All rights reserved.
 // Licensed under the MIT License.
 
+
 enclave {
+    include "struct.h"
+
     trusted {
-        public void enclave_helloworld();
+        public void enclave_helloworld([out] struct_t* s);
     };
 
     untrusted {
-        void host_helloworld();
     };
 };
 
diff --git a/samples/helloworld/host/Makefile b/samples/helloworld/host/Makefile
index 1e692bf..33e227a 100644
--- a/samples/helloworld/host/Makefile
+++ b/samples/helloworld/host/Makefile
@@ -14,7 +14,7 @@ ifeq ($(USE_GCC),)
         COMPILER=clang
 endif
 
-CFLAGS=$(shell pkg-config oehost-$(COMPILER) --cflags)
+CFLAGS=$(shell pkg-config oehost-$(COMPILER) --cflags) -I..
 LDFLAGS=$(shell pkg-config oehost-$(COMPILER) --libs)
 
 build:
diff --git a/samples/helloworld/host/host.c b/samples/helloworld/host/host.c
index 4e7f85f..f8a93d9 100644
--- a/samples/helloworld/host/host.c
+++ b/samples/helloworld/host/host.c
@@ -3,6 +3,7 @@
 
 #include <openenclave/host.h>
 #include <stdio.h>
+#include "struct.h"
 
 // Include the untrusted helloworld header that is generated
 // during the build. This file is generated by calling the
@@ -24,13 +25,6 @@ bool check_simulate_opt(int* argc, const char* argv[])
     return false;
 }
 
-// This is the function that the enclave will call back into to
-// print a message.
-void host_helloworld()
-{
-    fprintf(stdout, "Enclave called into host to print: Hello World!\n");
-}
-
 int main(int argc, const char* argv[])
 {
     oe_result_t result;
@@ -64,23 +58,37 @@ int main(int argc, const char* argv[])
     }
 
     // Call into the enclave
-    result = enclave_helloworld(enclave);
+    int len = 0;
+    struct_t s = { 0 };
+
+    printf("sizeof(struct_t) = %d\n", sizeof(struct_t));
+
+    result = enclave_helloworld(enclave, &s);
+
     if (result != OE_OK)
     {
         fprintf(
             stderr,
-            "calling into enclave_helloworld failed: result=%u (%s)\n",
+            "calling into ecall failed: result=%u (%s)\n",
             result,
             oe_result_str(result));
         goto exit;
     }
 
-    ret = 0;
+    printf("Dumping struct: ");
+
+    uint8_t* sp = (uint8_t*)&s;
+    for(unsigned int i = 0; i < sizeof(struct_t); i++)
+    {
+        printf("%02x ", sp[i]);
+    }
+    printf("\n");
+
 
 exit:
     // Clean up the enclave if we created one
     if (enclave)
         oe_terminate_enclave(enclave);
 
-    return ret;
+    return 0;
 }
