From 09185e6a969acbcb9e2c4814fdc29bb395415710 Mon Sep 17 00:00:00 2001
From: Jo Van Bulck <jo.vanbulck@cs.kuleuven.be>
Date: Tue, 20 Dec 2016 07:47:02 +0100
Subject: [PATCH 1/3] Elementary dummy application controlling access to
 function pointers.

---
 LibOS/shim/test/apps/hello/.gitignore              |  5 ++
 LibOS/shim/test/apps/hello/Makefile                | 23 ++++++++
 LibOS/shim/test/apps/hello/helloworld.c            | 67 ++++++++++++++++++++++
 .../test/apps/hello/helloworld.manifest.template   | 20 +++++++
 4 files changed, 115 insertions(+)
 create mode 100644 LibOS/shim/test/apps/hello/.gitignore
 create mode 100644 LibOS/shim/test/apps/hello/Makefile
 create mode 100644 LibOS/shim/test/apps/hello/helloworld.c
 create mode 100644 LibOS/shim/test/apps/hello/helloworld.manifest.template

diff --git a/LibOS/shim/test/apps/hello/.gitignore b/LibOS/shim/test/apps/hello/.gitignore
new file mode 100644
index 0000000..c866c18
--- /dev/null
+++ b/LibOS/shim/test/apps/hello/.gitignore
@@ -0,0 +1,5 @@
+helloworld
+helloworld.manifest
+*.manifest.sgx
+*.sig
+*.token
diff --git a/LibOS/shim/test/apps/hello/Makefile b/LibOS/shim/test/apps/hello/Makefile
new file mode 100644
index 0000000..40162e5
--- /dev/null
+++ b/LibOS/shim/test/apps/hello/Makefile
@@ -0,0 +1,23 @@
+
+manifests = helloworld.manifest
+
+target = helloworld
+exec_target = $(manifests)
+
+extra_rules = \
+	-e 's:\$$(PAL):../pal_loader:g'
+
+level = ../../
+include ../../Makefile
+
+helloworld: helloworld.o
+	@echo "[ now linking.. ]"
+	@# link through the compiler to avoid linking errors
+	$(CC) $(LDFLAGS) $^ -o $@
+
+%.o : %.c
+	@echo [ $< ]
+	$(CC) $(CFLAGS) -c $< -o $@
+
+distclean: clean
+	rm -f *.o *.manifest.sgx *.sig *.token
diff --git a/LibOS/shim/test/apps/hello/helloworld.c b/LibOS/shim/test/apps/hello/helloworld.c
new file mode 100644
index 0000000..b2a1a44
--- /dev/null
+++ b/LibOS/shim/test/apps/hello/helloworld.c
@@ -0,0 +1,67 @@
+/*
+ * Elementary dummy application that features a struct with 2 function pointers,
+ * and decides access by comparing a user-provided number with a secret PIN.
+ */
+#include <stdio.h>
+#include <fcntl.h>
+#include <stdint.h>
+#include <stdlib.h>
+
+/*
+ * Simply retrieve the PIN from the untrusted runtime (ignore secure I/O).
+ */
+int get_user_pin(void)
+{
+    int pin = 0x0;
+    printf("app: enter PIN..\n> ");
+    fflush(stdout);
+    scanf("%d", &pin);
+    return pin;
+}
+
+void access_allowed_handler(void)
+{
+    puts("===> app: access allowed! <===");
+    exit(0);
+}   
+
+void access_denied_handler(void)
+{
+    puts("===> app: access denied! <===");
+}
+
+struct accessControl {
+    int secretPin;
+    void (*allowAccess)(void);
+    void (*denyAccess)(void);
+};
+
+struct accessControl ac = {
+    .secretPin = 1234,
+    .allowAccess = &access_allowed_handler,
+    .denyAccess = &access_denied_handler
+};
+
+int main(int argc, char ** argv)
+{
+    printf("\n\nHello world from enclaved application binary!\n");
+    printf("\t--> ac.allowAccess at %p is %p (access_allowed_handler)\n",
+        &ac.allowAccess, ac.allowAccess);
+
+    int pin = get_user_pin();
+    printf("user entered %d\n", pin);
+    
+    puts("app: checking acess..");
+    if (pin == ac.secretPin) ac.allowAccess(); else ac.denyAccess();
+
+    /*
+     * Untrusted runtime can use the following ocall to recognize the enclaved
+     * binary is running, so the ecall attack can be launched.
+     */
+    puts("app: opening dummy_file");
+    fflush(stdout);
+    int fd = open("dummy_file", O_RDWR);
+    printf("\n\napp: should never see this (fd=%d)\n", fd);
+   
+    return 0;
+}
diff --git a/LibOS/shim/test/apps/hello/helloworld.manifest.template b/LibOS/shim/test/apps/hello/helloworld.manifest.template
new file mode 100644
index 0000000..9c0a9b7
--- /dev/null
+++ b/LibOS/shim/test/apps/hello/helloworld.manifest.template
@@ -0,0 +1,20 @@
+## which binary to load in the graphene OS instance
+loader.preload = file:$(SHIMPATH)
+#loader.exec = file:helloworld
+#loader.execname="jo"
+
+## which libraries should be mounted in the graphene OS instance
+loader.env.LD_LIBRARY_PATH = /lib
+
+fs.mount.lib.type = chroot
+fs.mount.lib.path = /lib
+fs.mount.lib.uri = file:$(LIBCDIR)
+
+fs.mount.bin.type = chroot
+fs.mount.bin.path = /bin
+fs.mount.bin.uri = file:/bin
+
+## which outside files should be signed for loading in the enclave
+sgx.trusted_files.ld = file:$(LIBCDIR)/ld-linux-x86-64.so.2
+sgx.trusted_files.libc = file:$(LIBCDIR)/libc.so.6
+
-- 
2.7.4

